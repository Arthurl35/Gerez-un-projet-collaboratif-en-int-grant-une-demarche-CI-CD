name: Integration Continue üöÄ

# D√©crire les √©v√©nements qui d√©clenchent le workflow
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

# Organiser les √©tapes du workflow (Ex√©cution en parall√®le)
jobs:
  frontend-test:
    runs-on: ubuntu-latest # Renseigner l'environnement d'ex√©cution
    defaults:
      run:
        working-directory: front # Lancer le job dans le r√©pertoire front

    steps: # Lister les √©tapes pour tester notre job
      # R√©cup√©rer le code source de notre r√©pertoire avec les actions de GitHub Actions
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      # Installer les d√©pendances
      - name: Install dependencies
        run: npm install

      # Ex√©cuter les tests de couverture
      - name: Run tests with coverage
        run: npm test -- --watch=false --browsers=ChromeHeadless

      # T√©l√©charger le rapport de couverture des tests
      - name: Upload test coverage report
        uses: actions/upload-artifact@v4
        with:
          name: bobapp-front-coverage
          path: front/coverage/bobapp

  backend-test:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: back # Lancer le job dans le r√©pertoire back

    steps:
      # R√©cup√©rer le code source de notre r√©pertoire avec les actions de GitHub Actions
      - name: Checkout code
        uses: actions/checkout@v4

      # Configurer Java
      - name: Set up Java
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '11'
          cache: 'maven'

      # Installer les d√©pendances
      - name: Install dependencies
        run: mvn clean install

      # Ex√©cuter les tests
      - name: Run tests
        run: mvn test

      # G√©n√©rer le rapport de couverture
      - name: Generate coverage report
        run: mvn jacoco:report

      # T√©l√©charger le rapport de couverture des tests
      - name: Upload test coverage report
        uses: actions/upload-artifact@v4
        with:
          name: bobapp-back-coverage
          path: back/target/site/jacoco

  sonarcloud:
    # D√©finir le job pour l'analyse SonarCloud
    name: Analyse avec SonarCloud
    runs-on: ubuntu-latest
    needs: [ frontend-test, backend-test ]  # Attend que les jobs frontend et backend soient termin√©s avec succ√®s

    steps:
      # R√©cup√©rer le code source de notre r√©pertoire avec les actions de GitHub Actions
      - name: Checkout code
        uses: actions/checkout@v4

      # Configurer JDK 17
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: 17
          distribution: 'zulu'

      # Installer SonarQube Scanner
      - name: Install SonarQube Scanner
        run: |
          curl -sSLo /tmp/sonar-scanner-cli.zip https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-4.6.2.2472-linux.zip
          unzip /tmp/sonar-scanner-cli.zip -d /tmp
          mv /tmp/sonar-scanner-4.6.2.2472-linux /tmp/sonar-scanner
          export PATH=$PATH:/tmp/sonar-scanner/bin

      # Mettre en cache les packages SonarCloud
      - name: Cache SonarCloud packages
        uses: actions/cache@v3
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      # Mettre en cache les packages Maven
      - name: Cache Maven packages
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/back/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      # T√©l√©charger le rapport de couverture front-end
      - name: Download frontend coverage report
        uses: actions/download-artifact@v4
        with:
          name: bobapp
